@page "/certlist"
@using Cert.Common.Models
@using Cert.Common.Services
@inject ICertificateService CertificateService
@inject HttpClient Http
@rendermode InteractiveServer

<PageTitle>Certificates</PageTitle>

<h1>Certificates</h1>

<p role="status">Total count: @_dataFromService?.Count()</p>

<table class="table">
    <thead>
    <tr>
        <th>Id</th>
        <th>Name</th>
        <th>Issuer</th>
        <th>Issue Date</th>
        <th>Expiry Date</th>
        <th>Actions</th>
    </tr>
    </thead>
    <tbody>
    @if (_dataFromService == null)
    {
        <tr>
            <td>Loading...</td>
        </tr>
    }
    else
    {
        @foreach (var cert in _dataFromService!)
        {
            <tr>
                <td>@cert.Id</td>
                <td>@cert.LastName @cert.FirstName</td>
                <td>@cert.Issuer</td>
                <td>@cert.IssueDate.ToString("dd.MM.yyyy")</td>
                <td>@cert.ExpireDate.ToString("dd.MM.yyyy")</td>
                <td>
                    <button class="btn btn-primary" @onclick="() => ShowCertificateDetails(cert.Id)">Detail</button>
                    <button class="btn btn-danger" @onclick="() => DeleteCertificate(cert.Id)">Delete</button>
                </td>
            </tr>
        }
    }
    </tbody>
</table >


@code {

    private IEnumerable<Certificate>? _dataFromService;

    protected override async Task OnInitializedAsync()
    {
        // Use the injected service
        _dataFromService = await CertificateService.GetAllCertificates();
    }

    private void ShowCertificateDetails(int Id)
    {
        //currentCount++;
    }

    private async void DeleteCertificate(int id)
    {
        Http.BaseAddress = new Uri("http://localhost:5065");
        await Http.DeleteAsync($"/api/certificate/{id}");

        // reload page data
        _dataFromService = await CertificateService.GetAllCertificates();
    }

}