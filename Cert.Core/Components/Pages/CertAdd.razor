@page "/certadd"
@using Cert.Common.Models
@inject IJSRuntime JS
@inject HttpClient Http
@rendermode InteractiveServer

<PageTitle>Generate a certificate</PageTitle>

<h1>Generate a certificate</h1>

<div class="container">
    <div class="row section">
        <div class="col-md-12">
            <EditForm Model="@_request" OnValidSubmit="OnValidSubmit">
                <div>
                    <label>First Name:</label>
                    <input type="text" @bind-value="_request.FirstName"/>
                </div>
                <div>
                    <label>Last Name:</label>
                    <input type="text" @bind-value="_request.LastName"/>
                </div>
                <div>
                    <label>Certificate type:</label>
                    <select @bind="_request.CertificateType">
                        @foreach (CertificateType certType in Enum.GetValues(typeof(CertificateType)))
                        {
                            <option value="@certType">@certType</option>
                        }
                    </select>
                </div>
                <div>
                    <label>Birth Date:</label>
                    <input type="date" @bind-value="_request.BirthDate"/>
                </div>
                <button type="submit">Generate</button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private readonly CertificateRequest _request = new CertificateRequest();
    private string _responseMessage;

    private async void OnValidSubmit()
    {
        await JS.InvokeVoidAsync("logToConsole", _request);

        Http.BaseAddress = new Uri("http://localhost:5065");
        var response = await Http.PostAsJsonAsync("/api/certificate", _request);
        
        if (response.IsSuccessStatusCode)
        {
            _responseMessage = "User submitted successfully!";
        }
        else
        {
            _responseMessage = "Failed to submit user data.";
        }
    }

}